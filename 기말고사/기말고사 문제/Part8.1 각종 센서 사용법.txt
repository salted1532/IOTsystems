Part8. Basic sensor


08

Basic
Sensor

버저

• 버저 (Buzzer, beeper)

- 단순한 소리를 내는 스피커 같은 장치

- 간단하게 소리를 생성 가능

- 아두이노 디지털 핀에 연결해서 디지털 출력으로 제어 가능

004



08

Basic
Sensor

버저

• 버저

- LED blink 예제처럼 버저로 소리를 만들어보자

- 디지털 출력 사용

• 준비물

- 아두이노, 버저, 연결선

005


08   버저

Basic

Sensor


• 회로 연결

- 아두이노 → 버저

- D2 → +

- GND → -

• 예제 파일

- 직접 작성

006



08

Basic
Sensor

버저

• 버저로 음악을 연주해보자

- 음 🡺 음파의 주파수

- 주파수에 맞게 신호를 생성

- tone() 함수 🡺 주파수에 맞는 신호를 생성해주는 함수

tone( pin number, frequency in hertz, duration in milliseconds);

• 멜로디 예제

- Part8_1_Buzzer_Melody

007


08   버저

Basic

Sensor

#include "pitches.h"

int arraySize = 8;


// notes in the melody:

int melody[] = {

NOTE_C4, NOTE_D4, NOTE_E4, NOTE_F4,
NOTE_G4, NOTE_A4, NOTE_B4, NOTE_C5

};

// 각 음의 길이. 4분 음표, 8분 음표 등등...

int noteDurations[] = { 8, 8, 6, 6, 4, 4, 4, 4 };

void setup() {

for (int note = 0; note < arraySize; note ++) {

// noteDurations 배열 값은 음표의 길이이므로 1초를 해당 숫자로 나눠서

// 시간을 구한 다음 사용

// 예) 4분 음표 = 1000 / 4, 8분 음표 = 1000/8 ...
int duration = 1000/ noteDurations[note];
tone(2, melody[note], duration);

// 음표의 연주시간 + 30 ms 만큼 대기

delay(duration+30);

}

}


void loop() {

}

008



08

Basic
Sensor

버저

• 음악 연주 예제

- Part8_1_Buzzer_SuperMario

009



08

Basic
Sensor

버저

• 음악 연주 예제

- Part8_1_Buzzer_SuperMario

0010


08

Basic
Sensor

모션감지센서

0011



08

Basic
Sensor

모션감지 센서

• 모션감지 센서

- PIR(Passive Infrared, Pyroelectric IR) 센서

- BISS0001 컨트롤러를 포함

- 아두이노 디지털 핀에 연결해서 디지털 입력으로 감지

0012



08

Basic
Sensor

모션감지 센서

• 모션감지 센서

- 모션을 감지해서 LED로 알려주는 예제

- VR1 가변저항을 이용해 LED가 켜지는 시간 조절 가능

- 디지털 입력과 출력 사용

• 준비물

- 아두이노, 모션감지센서, 연결선

0013



08

Basic
Sensor

모션감지 센서

• 회로 연결

- 아두이노 → 모션감지 센서

- D2 → OUT

- 5V → +

- GND → -

0014



08

Basic
Sensor

모션감지 센서

int ledPin = 13; // LED 핀

int inputPin = 2; // PIR sensor 핀

void setup() {
pinMode(ledPin, OUTPUT);
pinMode(inputPin, INPUT);

}

void loop() {

int motion = digitalRead(inputPin); // 모션 탐지 결과 읽기
digitalWrite(ledPin, motion);  // LED 업데이트
delay(10);

}

0015



08

Basic
Sensor

모션감지 센서

• 예제

- Part8_2_Motion_Detect

• 심화 학습

- 아두이노 없이 LED를 바로 제어할 수 있음!

- 아두이노를 이용해 센서의 변화가 감지되는 순간만 포착

- Part8_2_Motion_Detect_Advanced

0016


08

Basic
Sensor

초음파 센서

0017



08

Basic
Sensor

초음파 센서

• 초음파 센서

- Ultrasonic 센서

- 초음파 발신 후 수신까지 걸리는 시간 측정

- 음파의 속도를 이용해 거리 계산 (340m/s,1cm/29us)

거리(cm) = 측정 시간 / 29 / 2

- 2cm ~ 5m, 측정 각도 15’

- 거리가 멀수록 면적이 커져야 인식

0018



08

Basic
Sensor

초음파 센서

• 모션감지센서

- 초음파 센서로 측정한 거리를 PC로 출력

• 준비물

- 아두이노, 초음파 센서, 연결선

0019



08

Basic
Sensor

초음파 센서

• 회로 연결

- 아두이노 → 초음파 센서

- 5V → 5V (VCC)

- Trig → D2

- Echo → D3

- GND → GND

0020



08

Basic
Sensor

초음파 센서

void setup() {
Serial.begin(9600);

pinMode(2,OUTPUT); // 센서 Trig 핀

pinMode(3,INPUT); // 센서 Echo 핀

}


Serial 통신, 핀 초기화
Trig 핀으로 초음파 전송

Echo 핀으로 시간 측정
(HIGH -> LOW)

값 출력
거리계산

void loop() {

int duration, cm;

digitalWrite(2,HIGH); // 센서에 Trig 신호 입력
delayMicroseconds(10); // 10us 정도 유지
digitalWrite(2,LOW); // Trig 신호 off

duration = pulseIn(3, HIGH); // Echo pin: HIGH->Low 간격을 측정

cm = microsecondsToCentimeters(duration); // 거리(cm)로 변환

Serial.print(cm);
Serial.println("cm");

delay(300); // 0.3초 대기 후 다시 측정

}


int microsecondsToCentimeters(int microseconds) {
return microseconds / 29 / 2;

}

0021



08

Basic
Sensor

초음파 센서

• 예제

- Part8_3_Ultrasonic_sensor

0022


08

Basic
Sensor

조이스틱

0023



08

Basic
Sensor

조이스틱

• 조이스틱

- 손잡이의 움직임을 두 개의 가변저항으로 측정

- 손잡이의 움직임을 X, Y축 수치로 표현 가능

- 아날로그 입력 기능 사용

0024



08

Basic
Sensor

조이스틱

• 회로 연결

- 아두이노 → 조이스틱

- 5V → 5V (VCC)

- D6 → B (SEL)

- A0 → X (VER)

- A1 → Y (HOR)

- GND → - (GND)

0025



08

Basic
Sensor

Serial 통신, 핀 초기화
조이스틱 상태 읽기
시리얼로 손잡이 위치

출력

버튼 상태 출력

조이스틱

void setup() {

pinMode(6, INPUT_PULLUP); // 버튼 핀을 읽기 모드로

Serial.begin(9600);

}

void loop() {

int vertical, horizontal, select;

vertical = analogRead(A0); // x축 = 0-1023
horizontal = analogRead(A1); // y축 = 0-1023

select = digitalRead(6); // 버튼, 눌렀을 때 = LOW, 뗐을 때 = HIGH

Serial.print("X = ");
Serial.print(vertical);
Serial.print(", Y = ");
Serial.print(horizontal);
Serial.print(", Button = ");

if(select == HIGH) {
Serial.println("not pressed");

} else {
Serial.println("PRESSED!");


}

delay(200);

}

0026



08

Basic
Sensor

조이스틱

• 예제

- Part8_4_Joystick

0027


08

Basic
Sensor

가스센서

0028



08

Basic
Sensor

가스센서

• 가스센서

- MQ-XXX 가스 센서

http://playground.arduino.cc/Main/MQGasSensors

- MQ-135 공기질 센서 (CO2 측정)

- 공기를 가열해서 기화된 기체를 측정 (열선 내장)

- warming up time 이 필요

- 아날로그 입력 기능 사용

0029



08

Basic
Sensor

가스센서

• 가스센서

- 측정된 전압 Level 에 따라 가스 농도를 추정 가능

- CO2 측정 라이브러리 사용

https://github.com/GeorgK/MQ135

0030



08

Basic
Sensor

가스센서

• 회로 연결

- 아두이노 → 가스 센서

- 5V → 5V (VCC)

- A0 → AOUT

- GND → - (GND)

0031



08

Basic
Sensor

가스센서

#include "MQ135.h"

MQ135 gasSensor = MQ135(A0); // 라이브러리

void setup() {
Serial.begin(9600);


Serial 통신, 핀 초기화
센서 보정할 때 사용
가스 측정

농도 출력

}

void loop() {

// Read out the calibration value with below code

//float rzero = gasSensor.getRZero(); //

float ppm = gasSensor.getPPM(); // 센서 값 측정 및 농도 변환

Serial.print("CO2(ppm) = ");
Serial.println(ppm);

delay(350);

}

0032



08

Basic
Sensor

가스센서

• 예제

- Part8_5_Gas_sensor

0033


08

Basic
Sensor

RGB LED

0034



08

Basic
Sensor

RGB LED

• RGB LED

- 3색 LED가 합쳐진 형태

- 다양한 색상을 표현

- 아날로그 출력 기능 사용 (PWM)

0035



08

Basic
Sensor

RGB LED

• 회로 연결

- 아두이노 → RGB LED

- D9 → R

- D10 → G

- D11 → B

- GND → - (GND)

0036



08

Basic
Sensor

RGB LED


int redPin = 9;

int greenPin = 10;
int bluePin = 11;
int potPin = A0;

int red = 0;
int green = 0;
int blue = 0;
int mode = 0;

void setup() {

}

void loop() {

// 포텐셔미터 읽기 (10 bits, 0~1023)
int potValue = analogRead(potPin);

// RGB LED 색 변화

if(mode == 0) {
red = potValue/4;

analogWrite(redPin, red);

} else if(mode == 1) {
green = potValue/4;

analogWrite(greenPin, green);

} else {

blue = potValue/4;
analogWrite(bluePin, blue);

}


delay(50);

}

0037



08

Basic
Sensor

RGB LED

• 예제

- Part8_6_RGB_LED

0038


08

Basic
Sensor

서보 모터

0039



08

Basic
Sensor

모터 종류

• DC 모터

- 가장 흔한 모터, 입력 전류 방향으로(+, -) 회전방향 제어

- 고회전에 유리, RC카, 쿼드콥터 등 광범위하게 사용

- 회전수와 방향 제어를 위해서는 드라이버 모듈이 필요

• 서보 모터 (Servo motor)

- 보통 0~180 사이를 움직이며 위치를 정확히 제어가능

- RC카의 방향타, 로봇 관절 등 회전각 제어에 적합

- PWM 신호로 간단히 위치 제어 가능

• 스텝 모터 (Stepper motor)

- 회전 방향 뿐 아니라 회전각을 정밀히 제어할 수 있음

- DC 모터와 서보 모터의 장점을 합친 모터

- 상대적으로 고회전이 요하지 않고 정밀한 제어가 필요한 경우

- 3D 프린터의 핵심 모터

- 제어가 복잡하므로 스텝모터 드라이버 모듈을 이용해서 제어

0040



08

Basic
Sensor

서보 모터

• 서보 모터

- PWM 신호를 이용해 팔의 각도를 자유롭게 조절 가능

- 아날로그 출력 기능 사용 (PWM)

- Servo 라이브러리로 제어

0041



08

Basic
Sensor

서보 모터

• 회로 연결

- 아두이노 → 서보 모터

- 5V → 빨간색

- D9 → 노란색

- GND → 검은색

- 아두이노 → 포텐셔미터

- 5V → 다리 1

- A0 → 다리 2

- GND → 다리 3

0042



08

Basic
Sensor

서보 모터

#include <Servo.h>


라이브러리 초기화
포텐셔미터 읽기
서보모터 제어

Servo servo;

int servoPin = 9;

void setup() {
servo.attach(servoPin);

}

void loop() {

int potValue = analogRead(A0); // 포텐셔미터 입력

int angle = map(potValue, 0, 1023, 0, 180); // 포텐셔미터의 입력을 회전각으로 변환

servo.write(angle); // 서보모터 제어

delay(100);

}
